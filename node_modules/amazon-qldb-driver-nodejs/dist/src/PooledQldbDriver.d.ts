import { ClientConfiguration } from "aws-sdk/clients/qldbsession";
import { QldbDriver } from "./QldbDriver";
import { QldbSession } from "./QldbSession";
/**
 * Represents a factory for accessing pooled sessions to a specific ledger within QLDB. This class or
 * {@linkcode QldbDriver} should be the main entry points to any interaction with QLDB.
 * {@linkcode PooledQldbDriver.getSession} will create a {@linkcode PooledQldbSession} to the specified ledger within
 * QLDB as a communication channel. Any acquired sessions must be cleaned up with {@linkcode PooledQldbSession.close}
 * when they are no longer needed in order to return the session to the pool. If this is not done, this driver may
 * become unusable if the pool limit is exceeded.
 *
 * This factory pools sessions and attempts to return unused but available sessions when getting new sessions. The
 * advantage to using this over the non-pooling driver is that the underlying connection that sessions use to
 * communicate with QLDB can be recycled, minimizing resource usage by preventing unnecessary connections and reducing
 * latency by not making unnecessary requests to start new connections and end reusable, existing, ones.
 *
 * The pool does not remove stale sessions until a new session is retrieved. The default pool size is the maximum
 * amount of connections the session client allows. {@linkcode PooledQldbDriver.close} should be called when this
 * factory is no longer needed in order to clean up resources, ending all sessions in the pool.
 */
export declare class PooledQldbDriver extends QldbDriver {
    private _poolLimit;
    private _timeoutMillis;
    private _availablePermits;
    private _sessionPool;
    private _semaphore;
    /**
     * Creates a PooledQldbDriver.
     * @param qldbClientOptions The object containing options for configuring the low level client.
     *                          See {@link https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/QLDBSession.html#constructor-details|Low Level Client Constructor}.
     * @param ledgerName The QLDB ledger name.
     * @param retryLimit The number of automatic retries for statement executions using convenience methods on sessions
                         when an OCC conflict or retriable exception occurs. This value must not be negative.
     * @param poolLimit The session pool limit. Set to `undefined` to use the maximum sockets from the `globalAgent`.
     * @param timeoutMillis The timeout in milliseconds while attempting to retrieve a session from the session pool.
     * @throws RangeError if `retryLimit` is less than 0 or `poolLimit` is greater than the client limit.
     */
    constructor(ledgerName: string, qldbClientOptions?: ClientConfiguration, retryLimit?: number, poolLimit?: number, timeoutMillis?: number);
    /**
     * Close this driver and any sessions in the pool.
     */
    close(): void;
    /**
     * This method will attempt to retrieve an active, existing session, or it will start a new session with QLDB if
     * none are available and the session pool limit has not been reached. If the pool limit has been reached, it will
     * attempt to retrieve a session from the pool until the timeout is reached.
     * @returns Promise which fulfills with a QldbSession.
     * @throws {@linkcode DriverClosedError} when this driver is closed.
     * @throws {@linkcode SessionPoolEmptyError} if the timeout is reached while attempting to retrieve a session.
     */
    getSession(): Promise<QldbSession>;
    /**
     * Release a session back into the pool.
     */
    private _returnSessionToPool;
}
