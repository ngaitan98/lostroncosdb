/// <reference types="node" />
import { Readable } from "stream";
import { QldbWriter } from "./QldbWriter";
import { Result } from "./Result";
import { Transaction } from "./Transaction";
/**
 * A class to handle lambda execution.
 */
export declare class TransactionExecutor {
    _transaction: Transaction;
    /**
     * Creates a TransactionExecutor.
     * @param transaction The transaction that this executor is running within.
     */
    constructor(transaction: Transaction);
    /**
     * Abort the transaction and roll back any changes.
     * @throws {@linkcode LambdaAbortedError} when called.
     */
    abort(): void;
    /**
     * Execute the specified statement in the current transaction.
     * @param statement The statement to execute.
     * @param parameters An optional list of QLDB writers containing Ion values to execute.
     * @returns Promise which fulfills with a Result.
     * @throws {@linkcode TransactionClosedError} when the transaction is closed.
     */
    executeInline(statement: string, parameters?: QldbWriter[]): Promise<Result>;
    /**
     * Execute the specified statement in the current transaction.
     * @param statement The statement to execute.
     * @param parameters An optional list of QLDB writers containing Ion values to execute.
     * @returns Promise which fulfills with a ResultStream.
     * @throws {@linkcode TransactionClosedError} when the transaction is closed.
     */
    executeStream(statement: string, parameters?: QldbWriter[]): Promise<Readable>;
    /**
    * Get the transaction ID.
    * @returns The transaction ID.
    */
    getTransactionId(): string;
}
