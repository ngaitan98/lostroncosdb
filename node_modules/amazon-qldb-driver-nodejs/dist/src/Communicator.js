"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("util");
var logUtil_1 = require("./logUtil");
/**
 * A class representing an independent session to a QLDB ledger that handles endpoint requests. This class is used in
 * {@linkcode QldbDriver} and {@linkcode QldbSessionImpl}. This class is not meant to be used directly by developers.
 */
var Communicator = /** @class */ (function () {
    /**
     * Creates a Communicator.
     * @param qldbClient The low level service client.
     * @param ledgerName The QLDB ledger name.
     * @param sessionToken The initial session token representing the session connection.
     */
    function Communicator(qldbClient, ledgerName, sessionToken) {
        this._qldbClient = qldbClient;
        this._ledgerName = ledgerName;
        this._sessionToken = sessionToken;
    }
    /**
     * Static factory method that creates a Communicator object.
     * @param qldbClient The low level client that communicates with QLDB.
     * @param ledgerName The QLDB ledger name.
     * @returns Promise which fulfills with a Communicator.
     */
    Communicator.create = function (qldbClient, ledgerName) {
        return __awaiter(this, void 0, void 0, function () {
            var request, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        request = {
                            StartSession: {
                                LedgerName: ledgerName
                            }
                        };
                        return [4 /*yield*/, qldbClient.sendCommand(request).promise()];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, new Communicator(qldbClient, ledgerName, result.StartSession.SessionToken)];
                }
            });
        });
    };
    /**
     * Send request to abort the currently active transaction.
     * @returns Promise which fulfills with the abort transaction response returned from QLDB.
     */
    Communicator.prototype.abortTransaction = function () {
        return __awaiter(this, void 0, void 0, function () {
            var request, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        request = {
                            SessionToken: this._sessionToken,
                            AbortTransaction: {}
                        };
                        return [4 /*yield*/, this._sendCommand(request)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.AbortTransaction];
                }
            });
        });
    };
    /**
     * Send request to commit the currently active transaction.
     * @param txnId The ID of the transaction.
     * @param commitDigest The digest hash of the transaction to commit.
     * @returns Promise which fulfills with the commit transaction response returned from QLDB.
     */
    Communicator.prototype.commit = function (txnId, commitDigest) {
        return __awaiter(this, void 0, void 0, function () {
            var request, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        request = {
                            SessionToken: this._sessionToken,
                            CommitTransaction: {
                                TransactionId: txnId,
                                CommitDigest: commitDigest
                            }
                        };
                        return [4 /*yield*/, this._sendCommand(request)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.CommitTransaction];
                }
            });
        });
    };
    /**
     * Send an execute statement request with parameters to QLDB.
     * @param txnId The ID of the transaction.
     * @param statement The statement to execute.
     * @param parameters The parameters of the statement contained in ValueHolders.
     * @returns Promise which fulfills with the execute statement response returned from QLDB.
     */
    Communicator.prototype.executeStatement = function (txnId, statement, parameters) {
        return __awaiter(this, void 0, void 0, function () {
            var request, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        request = {
                            SessionToken: this._sessionToken,
                            ExecuteStatement: {
                                Statement: statement,
                                TransactionId: txnId,
                                Parameters: parameters
                            }
                        };
                        return [4 /*yield*/, this._sendCommand(request)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.ExecuteStatement];
                }
            });
        });
    };
    /**
     * Send request to end the independent session represented by the instance of this class.
     * @returns Promise which fulfills with void.
     */
    Communicator.prototype.endSession = function () {
        return __awaiter(this, void 0, void 0, function () {
            var request, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        request = {
                            SessionToken: this._sessionToken,
                            EndSession: {}
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this._sendCommand(request)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        // We will only log issues ending the session, as QLDB will clean them after a timeout.
                        logUtil_1.warn("Errors ending session: " + e_1 + ".");
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Send fetch result request to QLDB, retrieving the next chunk of data for the result.
     * @param txnId The ID of the transaction.
     * @param pageToken The token to fetch the next page.
     * @returns Promise which fulfills with the fetch page response returned from QLDB.
     */
    Communicator.prototype.fetchPage = function (txnId, pageToken) {
        return __awaiter(this, void 0, void 0, function () {
            var request, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        request = {
                            SessionToken: this._sessionToken,
                            FetchPage: {
                                TransactionId: txnId,
                                NextPageToken: pageToken
                            }
                        };
                        return [4 /*yield*/, this._sendCommand(request)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.FetchPage];
                }
            });
        });
    };
    /**
     * Get the QLDB ledger name.
     * @returns The QLDB ledger name.
     */
    Communicator.prototype.getLedgerName = function () {
        return this._ledgerName;
    };
    /**
     * Get the low-level service client that communicates with QLDB.
     * @returns The low-level service client.
     */
    Communicator.prototype.getQldbClient = function () {
        return this._qldbClient;
    };
    /**
     * Get the session token representing the session connection.
     * @returns The session token.
     */
    Communicator.prototype.getSessionToken = function () {
        return this._sessionToken;
    };
    /**
     * Send a request to start a transaction.
     * @returns Promise which fulfills with the start transaction response returned from QLDB.
     */
    Communicator.prototype.startTransaction = function () {
        return __awaiter(this, void 0, void 0, function () {
            var request, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        request = {
                            SessionToken: this._sessionToken,
                            StartTransaction: {}
                        };
                        return [4 /*yield*/, this._sendCommand(request)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.StartTransaction];
                }
            });
        });
    };
    /**
     * Call the sendCommand method of the low level service client.
     * @param request A SendCommandRequest object containing the request information to be sent to QLDB.
     * @returns Promise which fulfills with a SendCommandResult object.
     */
    Communicator.prototype._sendCommand = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._qldbClient.sendCommand(request).promise()];
                    case 1:
                        result = _a.sent();
                        logUtil_1.debug("Received response: " + util_1.inspect(result, { depth: 2 }));
                        return [2 /*return*/, result];
                }
            });
        });
    };
    return Communicator;
}());
exports.Communicator = Communicator;
