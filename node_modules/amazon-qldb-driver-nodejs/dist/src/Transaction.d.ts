/// <reference types="node" />
import { Readable } from "stream";
import { Communicator } from "./Communicator";
import { QldbWriter } from "./QldbWriter";
import { Result } from "./Result";
/**
 * A class representing a QLDB transaction.
 *
 * Every transaction is tied to a parent (Pooled)QldbSession, meaning that if the parent session is closed or
 * invalidated, the child transaction is automatically closed and cannot be used. Only one transaction can be active at
 * any given time per parent session, and thus every transaction should call {@linkcode Transaction.abort} or
 * {@linkcode Transaction.commit} when it is no longer needed, or when a new transaction is desired from the parent
 * session.
 *
 * An InvalidSessionException indicates that the parent session is dead, and a new transaction cannot be created
 * without a new (Pooled)QldbSession being created from the parent driver.
 *
 * Any unexpected errors that occur within a transaction should not be retried using the same transaction, as the state
 * of the transaction is now ambiguous.
 *
 * When an OCC conflict occurs, the transaction is closed and must be handled manually by creating a new transaction
 * and re-executing the desired queries.
 *
 * Child {@linkcode ResultStream} objects will be closed when this transaction is aborted or committed.
 */
export declare class Transaction {
    private _communicator;
    private _txnId;
    private _isClosed;
    private _resultStreams;
    private _txnHash;
    private _hashLock;
    /**
     * Create a Transaction.
     * @param communicator The Communicator object representing a communication channel with QLDB.
     * @param txnId The ID of the transaction.
     */
    constructor(communicator: Communicator, txnId: string);
    /**
     * Abort this transaction and close child ResultStream objects. No-op if already closed by commit or previous abort.
     * @returns Promise which fulfills with void.
     */
    abort(): Promise<void>;
    /**
     * Commits and closes child ResultStream objects.
     * @returns Promise which fulfills with void.
     * @throws {@linkcode TransactionClosedError} when this transaction is closed.
     * @throws {@linkcode ClientException} when the commit digest from commit transaction result does not match.
     */
    commit(): Promise<void>;
    /**
     * Execute the specified statement in the current transaction.
     * @param statement A statement to execute against QLDB as a string.
     * @param parameters An optional list of QLDB writers containing Ion values to execute against QLDB.
     * @returns Promise which fulfills with a fully-buffered Result.
     */
    executeInline(statement: string, parameters?: QldbWriter[]): Promise<Result>;
    /**
     * Execute the specified statement in the current transaction.
     * @param statement A statement to execute against QLDB as a string.
     * @param parameters An optional list of QLDB writers containing Ion values to execute against QLDB.
     * @returns Promise which fulfills with a Readable.
     */
    executeStream(statement: string, parameters?: QldbWriter[]): Promise<Readable>;
    /**
     * Retrieve the transaction ID associated with this transaction.
     * @returns The transaction ID.
     */
    getTransactionId(): string;
    /**
     * Mark the transaction as closed, and stop streaming for any ResultStream objects.
     */
    private _internalClose;
    /**
     * Helper method to execute statement against QLDB.
     * @param statement A statement to execute against QLDB as a string.
     * @param parameters A list of QLDB writers containing Ion values to execute against QLDB.
     * @returns Promise which fulfills with a ExecuteStatementResult object.
     * @throws {@linkcode TransactionClosedError} when transaction is closed.
     */
    private _sendExecute;
}
