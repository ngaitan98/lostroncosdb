import { QLDBSession } from "aws-sdk";
import { AbortTransactionResult, CommitDigest, CommitTransactionResult, ExecuteStatementResult, FetchPageResult, PageToken, StartTransactionResult, ValueHolder } from "aws-sdk/clients/qldbsession";
/**
 * A class representing an independent session to a QLDB ledger that handles endpoint requests. This class is used in
 * {@linkcode QldbDriver} and {@linkcode QldbSessionImpl}. This class is not meant to be used directly by developers.
 */
export declare class Communicator {
    private _qldbClient;
    private _ledgerName;
    private _sessionToken;
    /**
     * Creates a Communicator.
     * @param qldbClient The low level service client.
     * @param ledgerName The QLDB ledger name.
     * @param sessionToken The initial session token representing the session connection.
     */
    private constructor();
    /**
     * Static factory method that creates a Communicator object.
     * @param qldbClient The low level client that communicates with QLDB.
     * @param ledgerName The QLDB ledger name.
     * @returns Promise which fulfills with a Communicator.
     */
    static create(qldbClient: QLDBSession, ledgerName: string): Promise<Communicator>;
    /**
     * Send request to abort the currently active transaction.
     * @returns Promise which fulfills with the abort transaction response returned from QLDB.
     */
    abortTransaction(): Promise<AbortTransactionResult>;
    /**
     * Send request to commit the currently active transaction.
     * @param txnId The ID of the transaction.
     * @param commitDigest The digest hash of the transaction to commit.
     * @returns Promise which fulfills with the commit transaction response returned from QLDB.
     */
    commit(txnId: string, commitDigest: CommitDigest): Promise<CommitTransactionResult>;
    /**
     * Send an execute statement request with parameters to QLDB.
     * @param txnId The ID of the transaction.
     * @param statement The statement to execute.
     * @param parameters The parameters of the statement contained in ValueHolders.
     * @returns Promise which fulfills with the execute statement response returned from QLDB.
     */
    executeStatement(txnId: string, statement: string, parameters: ValueHolder[]): Promise<ExecuteStatementResult>;
    /**
     * Send request to end the independent session represented by the instance of this class.
     * @returns Promise which fulfills with void.
     */
    endSession(): Promise<void>;
    /**
     * Send fetch result request to QLDB, retrieving the next chunk of data for the result.
     * @param txnId The ID of the transaction.
     * @param pageToken The token to fetch the next page.
     * @returns Promise which fulfills with the fetch page response returned from QLDB.
     */
    fetchPage(txnId: string, pageToken: PageToken): Promise<FetchPageResult>;
    /**
     * Get the QLDB ledger name.
     * @returns The QLDB ledger name.
     */
    getLedgerName(): string;
    /**
     * Get the low-level service client that communicates with QLDB.
     * @returns The low-level service client.
     */
    getQldbClient(): QLDBSession;
    /**
     * Get the session token representing the session connection.
     * @returns The session token.
     */
    getSessionToken(): string;
    /**
     * Send a request to start a transaction.
     * @returns Promise which fulfills with the start transaction response returned from QLDB.
     */
    startTransaction(): Promise<StartTransactionResult>;
    /**
     * Call the sendCommand method of the low level service client.
     * @param request A SendCommandRequest object containing the request information to be sent to QLDB.
     * @returns Promise which fulfills with a SendCommandResult object.
     */
    private _sendCommand;
}
