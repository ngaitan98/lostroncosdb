"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var logUtil_1 = require("../logUtil");
var ClientException = /** @class */ (function (_super) {
    __extends(ClientException, _super);
    function ClientException(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, ClientException.prototype);
        _this.message = message;
        _this.name = "ClientException";
        logUtil_1.error(message);
        return _this;
    }
    return ClientException;
}(Error));
exports.ClientException = ClientException;
var DriverClosedError = /** @class */ (function (_super) {
    __extends(DriverClosedError, _super);
    function DriverClosedError() {
        var _this = this;
        var message = "Cannot invoke methods on a closed driver. Please create a new driver and retry.";
        _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, DriverClosedError.prototype);
        _this.message = message;
        _this.name = "DriverClosedError";
        logUtil_1.error(message);
        return _this;
    }
    return DriverClosedError;
}(Error));
exports.DriverClosedError = DriverClosedError;
var LambdaAbortedError = /** @class */ (function (_super) {
    __extends(LambdaAbortedError, _super);
    function LambdaAbortedError() {
        var _this = this;
        var message = "Abort called. Halting execution of lambda function.";
        _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, LambdaAbortedError.prototype);
        _this.message = message;
        _this.name = "LambdaAbortedError";
        logUtil_1.error(message);
        return _this;
    }
    return LambdaAbortedError;
}(Error));
exports.LambdaAbortedError = LambdaAbortedError;
var SessionClosedError = /** @class */ (function (_super) {
    __extends(SessionClosedError, _super);
    function SessionClosedError() {
        var _this = this;
        var message = "Cannot invoke methods on a closed QldbSession. Please create a new session and retry.";
        _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, SessionClosedError.prototype);
        _this.message = message;
        _this.name = "SessionClosedError";
        logUtil_1.error(message);
        return _this;
    }
    return SessionClosedError;
}(Error));
exports.SessionClosedError = SessionClosedError;
var SessionPoolEmptyError = /** @class */ (function (_super) {
    __extends(SessionPoolEmptyError, _super);
    function SessionPoolEmptyError(timeout) {
        var _this = this;
        var message = "Session pool is empty after waiting for " + timeout + " milliseconds. Please close existing sessions first " +
            "before retrying.";
        _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, SessionPoolEmptyError.prototype);
        _this.message = message;
        _this.name = "SessionPoolEmptyError";
        logUtil_1.error(message);
        return _this;
    }
    return SessionPoolEmptyError;
}(Error));
exports.SessionPoolEmptyError = SessionPoolEmptyError;
var TransactionClosedError = /** @class */ (function (_super) {
    __extends(TransactionClosedError, _super);
    function TransactionClosedError() {
        var _this = this;
        var message = "Cannot invoke methods on a closed Transaction. Please create a new transaction and retry.";
        _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, TransactionClosedError.prototype);
        _this.message = message;
        _this.name = "TransactionClosedError";
        logUtil_1.error(message);
        return _this;
    }
    return TransactionClosedError;
}(Error));
exports.TransactionClosedError = TransactionClosedError;
/**
 * Is the exception an InvalidParameterException?
 * @param e The client error caught.
 * @returns True if the exception is an InvalidParameterException. False otherwise.
 */
function isInvalidParameterException(e) {
    return e.code === "InvalidParameterException";
}
exports.isInvalidParameterException = isInvalidParameterException;
/**
 * Is the exception an InvalidSessionException?
 * @param e The client error caught.
 * @returns True if the exception is an InvalidSessionException. False otherwise.
 */
function isInvalidSessionException(e) {
    return e.code === "InvalidSessionException";
}
exports.isInvalidSessionException = isInvalidSessionException;
/**
 * Is the exception an OccConflictException?
 * @param e The client error caught.
 * @returns True if the exception is an OccConflictException. False otherwise.
 */
function isOccConflictException(e) {
    return e.code === "OccConflictException";
}
exports.isOccConflictException = isOccConflictException;
/**
 * Is the exception a ResourceNotFoundException?
 * @param e The client error to check to see if it is a ResourceNotFoundException.
 * @returns Whether or not the exception is a ResourceNotFoundException.
 */
function isResourceNotFoundException(e) {
    return e.code === "ResourceNotFoundException";
}
exports.isResourceNotFoundException = isResourceNotFoundException;
/**
 * Is the exception a ResourcePreconditionNotMetException?
 * @param e The client error to check to see if it is a ResourcePreconditionNotMetException.
 * @returns Whether or not the exception is a ResourcePreconditionNotMetException.
 */
function isResourcePreconditionNotMetException(e) {
    return e.code === "ResourcePreconditionNotMetException";
}
exports.isResourcePreconditionNotMetException = isResourcePreconditionNotMetException;
/**
 * Is the exception a retriable exception?
 * @param e The client error caught.
 * @returns True if the exception is a retriable exception. False otherwise.
 */
function isRetriableException(e) {
    return (e.statusCode === 500) ||
        (e.statusCode === 503) ||
        (e.code === "NoHttpResponseException") ||
        (e.code === "SocketTimeoutException");
}
exports.isRetriableException = isRetriableException;
