import { AWSError } from "aws-sdk";
declare class ClientException extends Error {
    constructor(message: string);
}
declare class DriverClosedError extends Error {
    constructor();
}
declare class LambdaAbortedError extends Error {
    constructor();
}
declare class SessionClosedError extends Error {
    constructor();
}
declare class SessionPoolEmptyError extends Error {
    constructor(timeout: number);
}
declare class TransactionClosedError extends Error {
    constructor();
}
/**
 * Is the exception an InvalidParameterException?
 * @param e The client error caught.
 * @returns True if the exception is an InvalidParameterException. False otherwise.
 */
declare function isInvalidParameterException(e: AWSError): boolean;
/**
 * Is the exception an InvalidSessionException?
 * @param e The client error caught.
 * @returns True if the exception is an InvalidSessionException. False otherwise.
 */
declare function isInvalidSessionException(e: AWSError): boolean;
/**
 * Is the exception an OccConflictException?
 * @param e The client error caught.
 * @returns True if the exception is an OccConflictException. False otherwise.
 */
declare function isOccConflictException(e: AWSError): boolean;
/**
 * Is the exception a ResourceNotFoundException?
 * @param e The client error to check to see if it is a ResourceNotFoundException.
 * @returns Whether or not the exception is a ResourceNotFoundException.
 */
declare function isResourceNotFoundException(e: AWSError): boolean;
/**
 * Is the exception a ResourcePreconditionNotMetException?
 * @param e The client error to check to see if it is a ResourcePreconditionNotMetException.
 * @returns Whether or not the exception is a ResourcePreconditionNotMetException.
 */
declare function isResourcePreconditionNotMetException(e: AWSError): boolean;
/**
 * Is the exception a retriable exception?
 * @param e The client error caught.
 * @returns True if the exception is a retriable exception. False otherwise.
 */
declare function isRetriableException(e: AWSError): boolean;
export { ClientException, DriverClosedError, isInvalidParameterException, isInvalidSessionException, isOccConflictException, isResourceNotFoundException, isResourcePreconditionNotMetException, isRetriableException, LambdaAbortedError, SessionClosedError, SessionPoolEmptyError, TransactionClosedError };
