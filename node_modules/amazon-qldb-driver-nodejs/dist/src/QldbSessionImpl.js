"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ion_js_1 = require("ion-js");
var Communicator_1 = require("./Communicator");
var Errors_1 = require("./errors/Errors");
var logUtil_1 = require("./logUtil");
var Result_1 = require("./Result");
var ResultStream_1 = require("./ResultStream");
var Transaction_1 = require("./Transaction");
var TransactionExecutor_1 = require("./TransactionExecutor");
var SLEEP_CAP_MS = 5000;
var SLEEP_BASE_MS = 10;
/**
 * Represents a session to a specific ledger within QLDB, allowing for execution of PartiQL statements and
 * retrieval of the associated results, along with control over transactions for bundling multiple executions.
 *
 * The execute methods provided will automatically retry themselves in the case that an unexpected recoverable error
 * occurs, including OCC conflicts, by starting a brand new transaction and re-executing the statement within the new
 * transaction.
 *
 * There are three methods of execution, ranging from simple to complex; the first two are recommended for inbuilt
 * error handling:
 *  - {@linkcode QldbSessionImpl.executeStatement} allows for a single statement to be executed within a transaction
 *    where the transaction is implicitly created and committed, and any recoverable errors are transparently handled.
 *  - {@linkcode QldbSessionImpl.executeLambda} allow for more complex execution sequences where more than one
 *    execution can occur, as well as other method calls. The transaction is implicitly created and committed, and any
 *    recoverable errors are transparently handled.
 *  - {@linkcode QldbSessionImpl.startTransaction} allows for full control over when the transaction is committed and
 *    leaves the responsibility of OCC conflict handling up to the user. Transactions' methods cannot be automatically
 *    retried, as the state of the transaction is ambiguous in the case of an unexpected error.
 */
var QldbSessionImpl = /** @class */ (function () {
    /**
     * Creates a QldbSessionImpl.
     * @param communicator The Communicator object representing a communication channel with QLDB.
     * @param retryLimit The limit for retries on execute methods when an OCC conflict or retriable exception occurs.
     */
    function QldbSessionImpl(communicator, retryLimit) {
        this._communicator = communicator;
        this._retryLimit = retryLimit;
        this._isClosed = false;
    }
    /**
     * Close this session. No-op if already closed.
     */
    QldbSessionImpl.prototype.close = function () {
        if (this._isClosed) {
            return;
        }
        this._isClosed = true;
        this._communicator.endSession();
    };
    /**
     * Implicitly start a transaction, execute the lambda, and commit the transaction, retrying up to the
     * retry limit if an OCC conflict or retriable exception occurs.
     *
     * @param queryLambda A lambda representing the block of code to be executed within the transaction. This cannot
     *                    have any side effects as it may be invoked multiple times, and the result cannot be trusted
     *                    until the transaction is committed.
     * @param retryIndicator An optional lambda that is invoked when the `querylambda` is about to be retried due to an
     *                       OCC conflict or retriable exception.
     * @returns Promise which fulfills with the return value of the `queryLambda` which could be a {@linkcode Result}
     *          on the result set of a statement within the lambda.
     * @throws {@linkcode SessionClosedError} when this session is closed.
     */
    QldbSessionImpl.prototype.executeLambda = function (queryLambda, retryIndicator) {
        return __awaiter(this, void 0, void 0, function () {
            var transaction, retryAttempt, transactionExecutor, returnedValue, e_1, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this._throwIfClosed();
                        retryAttempt = 0;
                        _b.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 16];
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 8, , 15]);
                        transaction = null;
                        return [4 /*yield*/, this.startTransaction()];
                    case 3:
                        transaction = _b.sent();
                        transactionExecutor = new TransactionExecutor_1.TransactionExecutor(transaction);
                        return [4 /*yield*/, queryLambda(transactionExecutor)];
                    case 4:
                        returnedValue = _b.sent();
                        if (!(returnedValue instanceof ResultStream_1.ResultStream)) return [3 /*break*/, 6];
                        return [4 /*yield*/, Result_1.Result.bufferResultStream(returnedValue)];
                    case 5:
                        returnedValue = _b.sent();
                        _b.label = 6;
                    case 6: return [4 /*yield*/, transaction.commit()];
                    case 7:
                        _b.sent();
                        return [2 /*return*/, returnedValue];
                    case 8:
                        e_1 = _b.sent();
                        return [4 /*yield*/, this._noThrowAbort(transaction)];
                    case 9:
                        _b.sent();
                        if (retryAttempt >= this._retryLimit || e_1 instanceof Errors_1.LambdaAbortedError) {
                            throw e_1;
                        }
                        if (!(Errors_1.isOccConflictException(e_1) || Errors_1.isRetriableException(e_1) || Errors_1.isInvalidSessionException(e_1))) return [3 /*break*/, 13];
                        logUtil_1.warn("OCC conflict or retriable exception occurred: " + e_1 + ".");
                        if (!Errors_1.isInvalidSessionException(e_1)) return [3 /*break*/, 11];
                        logUtil_1.info("Creating a new session to QLDB; previous session is no longer valid: " + e_1 + ".");
                        _a = this;
                        return [4 /*yield*/, Communicator_1.Communicator.create(this._communicator.getQldbClient(), this._communicator.getLedgerName())];
                    case 10:
                        _a._communicator = _b.sent();
                        _b.label = 11;
                    case 11:
                        retryAttempt++;
                        if (retryIndicator !== undefined) {
                            retryIndicator(retryAttempt);
                        }
                        return [4 /*yield*/, this._retrySleep(retryAttempt)];
                    case 12:
                        _b.sent();
                        return [3 /*break*/, 14];
                    case 13: throw e_1;
                    case 14: return [3 /*break*/, 15];
                    case 15: return [3 /*break*/, 1];
                    case 16: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Implicitly start a transaction, execute the statement, and commit the transaction, retrying up to the
     * retry limit if an OCC conflict or retriable exception occurs.
     *
     * @param statement The statement to execute.
     * @param parameters An optional list of QLDB writers containing Ion values to execute.
     * @param retryIndicator An optional lambda that is invoked when the `statement` is about to be retried due to an
     *                       OCC conflict or retriable exception.
     * @returns Promise which fulfills with a Result.
     * @throws {@linkcode SessionClosedError} when this session is closed.
     */
    QldbSessionImpl.prototype.executeStatement = function (statement, parameters, retryIndicator) {
        if (parameters === void 0) { parameters = []; }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.executeLambda(function (txn) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, txn.executeInline(statement, parameters)];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); }, retryIndicator)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Return the name of the ledger for the session.
     * @returns Returns the name of the ledger as a string.
     */
    QldbSessionImpl.prototype.getLedgerName = function () {
        return this._communicator.getLedgerName();
    };
    /**
     * Returns the token for this session.
     * @returns Returns the session token as a string.
     */
    QldbSessionImpl.prototype.getSessionToken = function () {
        return this._communicator.getSessionToken();
    };
    /**
     * Lists all tables in the ledger.
     * @returns Promise which fulfills with an array of table names.
     */
    QldbSessionImpl.prototype.getTableNames = function () {
        return __awaiter(this, void 0, void 0, function () {
            var statement;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        statement = "SELECT name FROM information_schema.user_tables WHERE status = 'ACTIVE'";
                        return [4 /*yield*/, this.executeLambda(function (transactionExecutor) { return __awaiter(_this, void 0, void 0, function () {
                                var result;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, transactionExecutor.executeStream(statement)];
                                        case 1:
                                            result = _a.sent();
                                            return [4 /*yield*/, this._tableNameHelper(result)];
                                        case 2: return [2 /*return*/, _a.sent()];
                                    }
                                });
                            }); })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Start a transaction using an available database session.
     * @returns Promise which fulfills with a transaction object.
     * @throws {@linkcode SessionClosedError} when this session is closed.
     */
    QldbSessionImpl.prototype.startTransaction = function () {
        return __awaiter(this, void 0, void 0, function () {
            var startTransactionResult, transaction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._throwIfClosed();
                        return [4 /*yield*/, this._communicator.startTransaction()];
                    case 1:
                        startTransactionResult = _a.sent();
                        transaction = new Transaction_1.Transaction(this._communicator, startTransactionResult.TransactionId);
                        return [2 /*return*/, transaction];
                }
            });
        });
    };
    /**
     * Determine if the session is alive by sending an abort message. This should only be used when the session is
     * known to not be in use, otherwise the state will be abandoned.
     * @returns Promise which fulfills with true if the abort succeeded, otherwise false.
     */
    QldbSessionImpl.prototype._abortOrClose = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._isClosed) {
                            return [2 /*return*/, false];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this._communicator.abortTransaction()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 3:
                        e_2 = _a.sent();
                        this._isClosed = true;
                        return [2 /*return*/, false];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Send an abort request which will not throw on failure.
     * @param transaction The transaction to abort.
     * @returns Promise which fulfills with void.
     */
    QldbSessionImpl.prototype._noThrowAbort = function (transaction) {
        return __awaiter(this, void 0, void 0, function () {
            var e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        if (!(null == transaction)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._communicator.abortTransaction()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, transaction.abort()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        e_3 = _a.sent();
                        logUtil_1.warn("Ignored error while aborting transaction during execution: " + e_3 + ".");
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Sleeps an exponentially increasing amount relative to `attemptNumber`.
     * @param attemptNumber The attempt number for the retry, used for the exponential portion of the sleep.
     * @returns Promise which fulfills with void.
     */
    QldbSessionImpl.prototype._retrySleep = function (attemptNumber) {
        return __awaiter(this, void 0, void 0, function () {
            var jitterRand, exponentialBackoff, sleep;
            var _this = this;
            return __generator(this, function (_a) {
                jitterRand = Math.random();
                exponentialBackoff = Math.min(SLEEP_CAP_MS, Math.pow(SLEEP_BASE_MS, attemptNumber));
                sleep = function (milliseconds) {
                    return new Promise(function (resolve) { return setTimeout(resolve, milliseconds); });
                };
                (function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, sleep(jitterRand * (exponentialBackoff + 1))];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); })();
                return [2 /*return*/];
            });
        });
    };
    /**
     * Helper function for getTableNames.
     * @param resultStream The result from QLDB containing the table names.
     * @returns Promise which fulfills with an array of table names or rejects with a {@linkcode ClientException}
     * when the reader does not contain a struct or if the value within the struct is not of type string.
     */
    QldbSessionImpl.prototype._tableNameHelper = function (resultStream) {
        return new Promise(function (res, rej) {
            var listOfStrings = [];
            resultStream.on("data", function (reader) {
                var type = reader.next();
                if (type.binaryTypeId !== ion_js_1.IonTypes.STRUCT.binaryTypeId) {
                    return rej(new Errors_1.ClientException("Unexpected format: expected struct, but got IonType with binary encoding: " +
                        ("" + type.binaryTypeId)));
                }
                reader.stepIn();
                type = reader.next();
                if (type.binaryTypeId === ion_js_1.IonTypes.STRING.binaryTypeId) {
                    listOfStrings.push(reader.stringValue());
                }
                else {
                    return rej(new Errors_1.ClientException("Unexpected format: expected string, but got IonType with binary encoding: " +
                        (type.binaryTypeId + ".")));
                }
            }).on("end", function () {
                res(listOfStrings);
            });
        });
    };
    /**
     * Check and throw if this session is closed.
     * @throws {@linkcode SessionClosedError} when this session is closed.
     */
    QldbSessionImpl.prototype._throwIfClosed = function () {
        if (this._isClosed) {
            throw new Errors_1.SessionClosedError();
        }
    };
    return QldbSessionImpl;
}());
exports.QldbSessionImpl = QldbSessionImpl;
