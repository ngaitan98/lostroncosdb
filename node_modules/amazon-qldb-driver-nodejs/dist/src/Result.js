"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ion_js_1 = require("ion-js");
var Errors_1 = require("./errors/Errors");
/**
 * A class representing a fully buffered set of results returned from QLDB.
 */
var Result = /** @class */ (function () {
    /**
     * Creates a Result.
     * @param resultList A list of readers containing the statement execution returned from QLDB.
     */
    function Result(resultList) {
        this._resultList = resultList;
    }
    /**
     * Static factory method that creates a Result object, containing the results of a statement execution from QLDB.
     * @param txnId The ID of the transaction the statement was executed in.
     * @param page The initial page returned from the statement execution.
     * @param communicator The Communicator used for the statement execution.
     * @returns Promise which fulfills with a Result.
     */
    Result.create = function (txnId, page, communicator) {
        return __awaiter(this, void 0, void 0, function () {
            var resultList;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Result._fetchResultPages(txnId, page, communicator)];
                    case 1:
                        resultList = _a.sent();
                        return [2 /*return*/, new Result(resultList)];
                }
            });
        });
    };
    /**
     * Static method that creates a Result object by reading and buffering the contents of a ResultStream.
     * @param resultStream A ResultStream object to convert to a Result object.
     * @returns Promise which fulfills with a Result.
     */
    Result.bufferResultStream = function (resultStream) {
        return __awaiter(this, void 0, void 0, function () {
            var resultList;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Result._readResultStream(resultStream)];
                    case 1:
                        resultList = _a.sent();
                        return [2 /*return*/, new Result(resultList)];
                }
            });
        });
    };
    /**
     * Returns the list of results of the statement execution returned from QLDB.
     * @returns A list of Readers which wrap the Ion values returned from the QLDB statement execution.
     */
    Result.prototype.getResultList = function () {
        return this._resultList.slice();
    };
    /**
     * Handle the unexpected Blob return type from QLDB.
     * @param IonBinary The IonBinary value returned from QLDB.
     * @returns The IonBinary value cast explicitly to one of the types that make up the IonBinary type. This will be
     *          either Buffer, Uint8Array, or string.
     * @throws {@linkcode ClientException} when the specific type of the IonBinary value is Blob.
     */
    Result._handleBlob = function (ionBinary) {
        if (ionBinary instanceof Buffer) {
            return ionBinary;
        }
        if (ionBinary instanceof Uint8Array) {
            return ionBinary;
        }
        if (typeof ionBinary === "string") {
            return ionBinary;
        }
        throw new Errors_1.ClientException("Unexpected Blob returned from QLDB.");
    };
    /**
     * Fetches all subsequent Pages given an initial Page, places each value of each Page in a Reader.
     * @param txnId The ID of the transaction the statement was executed in.
     * @param page The initial page returned from the statement execution.
     * @param communicator The Communicator used for the statement execution.
     * @returns Promise which fulfills with a list of Readers, representing all the returned values of the result set.
     */
    Result._fetchResultPages = function (txnId, page, communicator) {
        return __awaiter(this, void 0, void 0, function () {
            var currentPage, pageValuesArray, fetchPageResult, readerList;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        currentPage = page;
                        pageValuesArray = [];
                        if (currentPage.Values && currentPage.Values.length > 0) {
                            pageValuesArray.push(currentPage.Values);
                        }
                        _a.label = 1;
                    case 1:
                        if (!currentPage.NextPageToken) return [3 /*break*/, 3];
                        return [4 /*yield*/, communicator.fetchPage(txnId, currentPage.NextPageToken)];
                    case 2:
                        fetchPageResult = _a.sent();
                        currentPage = fetchPageResult.Page;
                        if (currentPage.Values && currentPage.Values.length > 0) {
                            pageValuesArray.push(currentPage.Values);
                        }
                        return [3 /*break*/, 1];
                    case 3:
                        readerList = [];
                        pageValuesArray.forEach(function (valueHolders) {
                            valueHolders.forEach(function (valueHolder) {
                                readerList.push(ion_js_1.makeReader(Result._handleBlob(valueHolder.IonBinary)));
                            });
                        });
                        return [2 /*return*/, readerList];
                }
            });
        });
    };
    /**
     * Helper method that reads a ResultStream and extracts the results, placing them in an array of Readers.
     * @param resultStream The ResultStream to read.
     * @returns Promise which fulfills with a list of Readers, representing all the returned values of the result set.
     */
    Result._readResultStream = function (resultStream) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (res) {
                        var listOfReaders = [];
                        resultStream.on("data", function (reader) {
                            listOfReaders.push(reader);
                        }).on("end", function () {
                            res(listOfReaders);
                        });
                    })];
            });
        });
    };
    return Result;
}());
exports.Result = Result;
