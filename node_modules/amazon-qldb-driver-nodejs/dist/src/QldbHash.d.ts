/**
 * A QLDB hash is either a 256 bit number or a special empty hash.
 */
export declare class QldbHash {
    private _qldbHash;
    /**
     * Creates a QldbHash.
     * @param qldbHash The QLDB hash.
     * @throws RangeError When this hash is not the correct hash size.
     */
    constructor(qldbHash: Uint8Array);
    /**
     * Sort the current hash value and the hash value provided by `that`, comparing by their **signed** byte values in
     * little-endian order.
     * @param that The Ion hash of the Ion value to compare.
     * @returns An QldbHash object that contains the concatenated hash values.
     */
    dot(that: QldbHash): QldbHash;
    equals(other: QldbHash): boolean;
    getHashSize(): number;
    getQldbHash(): Uint8Array;
    isEmpty(): boolean;
    /**
     * The QldbHash of an IonValue is just the IonHash of that value.
     * @param value The string or Ion value to be converted to Ion hash.
     * @returns A QldbHash object that contains Ion hash.
     */
    static toQldbHash(value: any): QldbHash;
    /**
     * Helper method that concatenates two Uint8Array.
     * @param arrays List of arrays to concatenate, in the order provided.
     * @returns The concatenated array.
     */
    static _concatenate(...arrays: Uint8Array[]): Uint8Array;
    /**
     * Compares two hashes by their **signed** byte values in little-endian order.
     * @param hash1 The hash value to compare.
     * @param hash2 The hash value to compare.
     * @returns Zero if the hash values are equal, otherwise return the difference of the first pair of non-matching
     *          bytes.
     * @throws RangeError When the hash is not the correct hash size.
     */
    static _hashComparator(hash1: Uint8Array, hash2: Uint8Array): number;
    /**
     * Takes two hashes, sorts them, and concatenates them.
     * @param h1 Byte array containing one of the hashes to compare.
     * @param h2 Byte array containing one of the hashes to compare.
     * @returns The concatenated array of hashes.
     */
    static _joinHashesPairwise(h1: Uint8Array, h2: Uint8Array): Uint8Array;
}
