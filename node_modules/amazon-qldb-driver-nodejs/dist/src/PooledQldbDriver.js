"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("http");
var semaphore_async_await_1 = require("semaphore-async-await");
var Errors_1 = require("./errors/Errors");
var logUtil_1 = require("./logUtil");
var PooledQldbSession_1 = require("./PooledQldbSession");
var QldbDriver_1 = require("./QldbDriver");
/**
 * Represents a factory for accessing pooled sessions to a specific ledger within QLDB. This class or
 * {@linkcode QldbDriver} should be the main entry points to any interaction with QLDB.
 * {@linkcode PooledQldbDriver.getSession} will create a {@linkcode PooledQldbSession} to the specified ledger within
 * QLDB as a communication channel. Any acquired sessions must be cleaned up with {@linkcode PooledQldbSession.close}
 * when they are no longer needed in order to return the session to the pool. If this is not done, this driver may
 * become unusable if the pool limit is exceeded.
 *
 * This factory pools sessions and attempts to return unused but available sessions when getting new sessions. The
 * advantage to using this over the non-pooling driver is that the underlying connection that sessions use to
 * communicate with QLDB can be recycled, minimizing resource usage by preventing unnecessary connections and reducing
 * latency by not making unnecessary requests to start new connections and end reusable, existing, ones.
 *
 * The pool does not remove stale sessions until a new session is retrieved. The default pool size is the maximum
 * amount of connections the session client allows. {@linkcode PooledQldbDriver.close} should be called when this
 * factory is no longer needed in order to clean up resources, ending all sessions in the pool.
 */
var PooledQldbDriver = /** @class */ (function (_super) {
    __extends(PooledQldbDriver, _super);
    /**
     * Creates a PooledQldbDriver.
     * @param qldbClientOptions The object containing options for configuring the low level client.
     *                          See {@link https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/QLDBSession.html#constructor-details|Low Level Client Constructor}.
     * @param ledgerName The QLDB ledger name.
     * @param retryLimit The number of automatic retries for statement executions using convenience methods on sessions
                         when an OCC conflict or retriable exception occurs. This value must not be negative.
     * @param poolLimit The session pool limit. Set to `undefined` to use the maximum sockets from the `globalAgent`.
     * @param timeoutMillis The timeout in milliseconds while attempting to retrieve a session from the session pool.
     * @throws RangeError if `retryLimit` is less than 0 or `poolLimit` is greater than the client limit.
     */
    function PooledQldbDriver(ledgerName, qldbClientOptions, retryLimit, poolLimit, timeoutMillis) {
        if (qldbClientOptions === void 0) { qldbClientOptions = {}; }
        if (retryLimit === void 0) { retryLimit = 4; }
        if (poolLimit === void 0) { poolLimit = 0; }
        if (timeoutMillis === void 0) { timeoutMillis = 30000; }
        var _this = _super.call(this, ledgerName, qldbClientOptions, retryLimit) || this;
        /**
         * Release a session back into the pool.
         */
        _this._returnSessionToPool = function (session) {
            _this._sessionPool.push(session);
            _this._semaphore.release();
            _this._availablePermits++;
            logUtil_1.debug("Session returned to pool; size is now " + _this._sessionPool.length + ".");
        };
        if (timeoutMillis < 0) {
            throw new RangeError("Value for timeout cannot be negative.");
        }
        if (poolLimit < 0) {
            throw new RangeError("Value for poolLimit cannot be negative.");
        }
        var maxSockets;
        if (qldbClientOptions.httpOptions && qldbClientOptions.httpOptions.agent) {
            maxSockets = qldbClientOptions.httpOptions.agent.maxSockets;
        }
        else {
            maxSockets = http_1.globalAgent.maxSockets;
        }
        if (0 === poolLimit) {
            _this._poolLimit = maxSockets;
        }
        else {
            _this._poolLimit = poolLimit;
        }
        if (_this._poolLimit > maxSockets) {
            throw new RangeError("The session pool limit given, " + _this._poolLimit + ", exceeds the limit set by the client,\n                 " + maxSockets + ". Please lower the limit and retry.");
        }
        _this._timeoutMillis = timeoutMillis;
        _this._availablePermits = _this._poolLimit;
        _this._sessionPool = [];
        _this._semaphore = new semaphore_async_await_1.default(_this._poolLimit);
        return _this;
    }
    /**
     * Close this driver and any sessions in the pool.
     */
    PooledQldbDriver.prototype.close = function () {
        _super.prototype.close.call(this);
        this._sessionPool.forEach(function (session) {
            session.close();
        });
    };
    /**
     * This method will attempt to retrieve an active, existing session, or it will start a new session with QLDB if
     * none are available and the session pool limit has not been reached. If the pool limit has been reached, it will
     * attempt to retrieve a session from the pool until the timeout is reached.
     * @returns Promise which fulfills with a QldbSession.
     * @throws {@linkcode DriverClosedError} when this driver is closed.
     * @throws {@linkcode SessionPoolEmptyError} if the timeout is reached while attempting to retrieve a session.
     */
    PooledQldbDriver.prototype.getSession = function () {
        return __awaiter(this, void 0, void 0, function () {
            var isPermitAcquired, session, isSessionAvailable, newSession, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._isClosed) {
                            throw new Errors_1.DriverClosedError();
                        }
                        logUtil_1.debug("Getting session. Current free session count: " + this._sessionPool.length + ". " +
                            ("Currently available permit count: " + this._availablePermits + "."));
                        return [4 /*yield*/, this._semaphore.waitFor(this._timeoutMillis)];
                    case 1:
                        isPermitAcquired = _a.sent();
                        if (!isPermitAcquired) return [3 /*break*/, 7];
                        this._availablePermits--;
                        _a.label = 2;
                    case 2:
                        if (!(this._sessionPool.length > 0)) return [3 /*break*/, 4];
                        session = this._sessionPool.pop();
                        return [4 /*yield*/, session._abortOrClose()];
                    case 3:
                        isSessionAvailable = _a.sent();
                        if (isSessionAvailable) {
                            logUtil_1.debug("Reusing session from pool.");
                            return [2 /*return*/, new PooledQldbSession_1.PooledQldbSession(session, this._returnSessionToPool)];
                        }
                        return [3 /*break*/, 2];
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        logUtil_1.debug("Creating new pooled session.");
                        return [4 /*yield*/, _super.prototype.getSession.call(this)];
                    case 5:
                        newSession = (_a.sent());
                        return [2 /*return*/, new PooledQldbSession_1.PooledQldbSession(newSession, this._returnSessionToPool)];
                    case 6:
                        e_1 = _a.sent();
                        this._semaphore.release();
                        this._availablePermits++;
                        throw e_1;
                    case 7: throw new Errors_1.SessionPoolEmptyError(this._timeoutMillis);
                }
            });
        });
    };
    return PooledQldbDriver;
}(QldbDriver_1.QldbDriver));
exports.PooledQldbDriver = PooledQldbDriver;
