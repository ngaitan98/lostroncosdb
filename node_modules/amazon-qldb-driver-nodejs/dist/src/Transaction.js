"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ion_js_1 = require("ion-js");
var semaphore_async_await_1 = require("semaphore-async-await");
var Errors_1 = require("./errors/Errors");
var logUtil_1 = require("./logUtil");
var QldbHash_1 = require("./QldbHash");
var Result_1 = require("./Result");
var ResultStream_1 = require("./ResultStream");
/**
 * A class representing a QLDB transaction.
 *
 * Every transaction is tied to a parent (Pooled)QldbSession, meaning that if the parent session is closed or
 * invalidated, the child transaction is automatically closed and cannot be used. Only one transaction can be active at
 * any given time per parent session, and thus every transaction should call {@linkcode Transaction.abort} or
 * {@linkcode Transaction.commit} when it is no longer needed, or when a new transaction is desired from the parent
 * session.
 *
 * An InvalidSessionException indicates that the parent session is dead, and a new transaction cannot be created
 * without a new (Pooled)QldbSession being created from the parent driver.
 *
 * Any unexpected errors that occur within a transaction should not be retried using the same transaction, as the state
 * of the transaction is now ambiguous.
 *
 * When an OCC conflict occurs, the transaction is closed and must be handled manually by creating a new transaction
 * and re-executing the desired queries.
 *
 * Child {@linkcode ResultStream} objects will be closed when this transaction is aborted or committed.
 */
var Transaction = /** @class */ (function () {
    /**
     * Create a Transaction.
     * @param communicator The Communicator object representing a communication channel with QLDB.
     * @param txnId The ID of the transaction.
     */
    function Transaction(communicator, txnId) {
        this._communicator = communicator;
        this._txnId = txnId;
        this._isClosed = false;
        this._resultStreams = [];
        this._txnHash = QldbHash_1.QldbHash.toQldbHash(txnId);
        this._hashLock = new semaphore_async_await_1.Lock();
    }
    /**
     * Abort this transaction and close child ResultStream objects. No-op if already closed by commit or previous abort.
     * @returns Promise which fulfills with void.
     */
    Transaction.prototype.abort = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._isClosed) {
                            return [2 /*return*/];
                        }
                        this._internalClose();
                        return [4 /*yield*/, this._communicator.abortTransaction()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Commits and closes child ResultStream objects.
     * @returns Promise which fulfills with void.
     * @throws {@linkcode TransactionClosedError} when this transaction is closed.
     * @throws {@linkcode ClientException} when the commit digest from commit transaction result does not match.
     */
    Transaction.prototype.commit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var commitTxnResult, e_1, e2_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._isClosed) {
                            throw new Errors_1.TransactionClosedError();
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, 9, 10]);
                        return [4 /*yield*/, this._hashLock.acquire()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this._communicator.commit(this._txnId, this._txnHash.getQldbHash())];
                    case 3:
                        commitTxnResult = _a.sent();
                        if (ion_js_1.toBase64(this._txnHash.getQldbHash()) !== ion_js_1.toBase64((commitTxnResult.CommitDigest))) {
                            throw new Errors_1.ClientException("Transaction's commit digest did not match returned value from QLDB.\n                    Please retry with a new transaction. Transaction ID: " + this._txnId + ".");
                        }
                        this._isClosed = true;
                        return [3 /*break*/, 10];
                    case 4:
                        e_1 = _a.sent();
                        if (Errors_1.isOccConflictException(e_1)) {
                            throw e_1;
                        }
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, this._communicator.abortTransaction()];
                    case 6:
                        _a.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        e2_1 = _a.sent();
                        logUtil_1.warn("Ignored error aborting transaction after a failed commit: " + e2_1 + ".");
                        return [3 /*break*/, 8];
                    case 8: throw e_1;
                    case 9:
                        this._internalClose();
                        this._hashLock.release();
                        return [7 /*endfinally*/];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Execute the specified statement in the current transaction.
     * @param statement A statement to execute against QLDB as a string.
     * @param parameters An optional list of QLDB writers containing Ion values to execute against QLDB.
     * @returns Promise which fulfills with a fully-buffered Result.
     */
    Transaction.prototype.executeInline = function (statement, parameters) {
        if (parameters === void 0) { parameters = []; }
        return __awaiter(this, void 0, void 0, function () {
            var result, inlineResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._sendExecute(statement, parameters)];
                    case 1:
                        result = _a.sent();
                        inlineResult = Result_1.Result.create(this._txnId, result.FirstPage, this._communicator);
                        return [2 /*return*/, inlineResult];
                }
            });
        });
    };
    /**
     * Execute the specified statement in the current transaction.
     * @param statement A statement to execute against QLDB as a string.
     * @param parameters An optional list of QLDB writers containing Ion values to execute against QLDB.
     * @returns Promise which fulfills with a Readable.
     */
    Transaction.prototype.executeStream = function (statement, parameters) {
        if (parameters === void 0) { parameters = []; }
        return __awaiter(this, void 0, void 0, function () {
            var result, resultStream;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._sendExecute(statement, parameters)];
                    case 1:
                        result = _a.sent();
                        resultStream = new ResultStream_1.ResultStream(this._txnId, result.FirstPage, this._communicator);
                        this._resultStreams.push(resultStream);
                        return [2 /*return*/, resultStream];
                }
            });
        });
    };
    /**
     * Retrieve the transaction ID associated with this transaction.
     * @returns The transaction ID.
     */
    Transaction.prototype.getTransactionId = function () {
        return this._txnId;
    };
    /**
     * Mark the transaction as closed, and stop streaming for any ResultStream objects.
     */
    Transaction.prototype._internalClose = function () {
        this._isClosed = true;
        while (this._resultStreams.length !== 0) {
            this._resultStreams.pop().close();
        }
    };
    /**
     * Helper method to execute statement against QLDB.
     * @param statement A statement to execute against QLDB as a string.
     * @param parameters A list of QLDB writers containing Ion values to execute against QLDB.
     * @returns Promise which fulfills with a ExecuteStatementResult object.
     * @throws {@linkcode TransactionClosedError} when transaction is closed.
     */
    Transaction.prototype._sendExecute = function (statement, parameters) {
        return __awaiter(this, void 0, void 0, function () {
            var statementHash_1, valueHolderList, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._isClosed) {
                            throw new Errors_1.TransactionClosedError();
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, , 4, 5]);
                        return [4 /*yield*/, this._hashLock.acquire()];
                    case 2:
                        _a.sent();
                        statementHash_1 = QldbHash_1.QldbHash.toQldbHash(statement);
                        valueHolderList = parameters.map(function (writer) {
                            try {
                                writer.close();
                            }
                            catch (e) {
                                logUtil_1.warn("Error encountered when attempting to close parameter writer. This warning can be ignored if " +
                                    ("the writer was manually closed: " + e + "."));
                            }
                            var ionBinary = writer.getBytes();
                            statementHash_1 = statementHash_1.dot(QldbHash_1.QldbHash.toQldbHash(ionBinary));
                            var valueHolder = {
                                IonBinary: ionBinary
                            };
                            return valueHolder;
                        });
                        this._txnHash = this._txnHash.dot(statementHash_1);
                        return [4 /*yield*/, this._communicator.executeStatement(this._txnId, statement, valueHolderList)];
                    case 3:
                        result = _a.sent();
                        return [2 /*return*/, result];
                    case 4:
                        this._hashLock.release();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    return Transaction;
}());
exports.Transaction = Transaction;
