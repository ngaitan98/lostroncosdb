/// <reference types="node" />
import { IonBinary, Page } from "aws-sdk/clients/qldbsession";
import { Reader } from "ion-js";
import { Communicator } from "./Communicator";
import { ResultStream } from "./ResultStream";
/**
 * A class representing a fully buffered set of results returned from QLDB.
 */
export declare class Result {
    private _resultList;
    /**
     * Creates a Result.
     * @param resultList A list of readers containing the statement execution returned from QLDB.
     */
    private constructor();
    /**
     * Static factory method that creates a Result object, containing the results of a statement execution from QLDB.
     * @param txnId The ID of the transaction the statement was executed in.
     * @param page The initial page returned from the statement execution.
     * @param communicator The Communicator used for the statement execution.
     * @returns Promise which fulfills with a Result.
     */
    static create(txnId: string, page: Page, communicator: Communicator): Promise<Result>;
    /**
     * Static method that creates a Result object by reading and buffering the contents of a ResultStream.
     * @param resultStream A ResultStream object to convert to a Result object.
     * @returns Promise which fulfills with a Result.
     */
    static bufferResultStream(resultStream: ResultStream): Promise<Result>;
    /**
     * Returns the list of results of the statement execution returned from QLDB.
     * @returns A list of Readers which wrap the Ion values returned from the QLDB statement execution.
     */
    getResultList(): Reader[];
    /**
     * Handle the unexpected Blob return type from QLDB.
     * @param IonBinary The IonBinary value returned from QLDB.
     * @returns The IonBinary value cast explicitly to one of the types that make up the IonBinary type. This will be
     *          either Buffer, Uint8Array, or string.
     * @throws {@linkcode ClientException} when the specific type of the IonBinary value is Blob.
     */
    static _handleBlob(ionBinary: IonBinary): Buffer | Uint8Array | string;
    /**
     * Fetches all subsequent Pages given an initial Page, places each value of each Page in a Reader.
     * @param txnId The ID of the transaction the statement was executed in.
     * @param page The initial page returned from the statement execution.
     * @param communicator The Communicator used for the statement execution.
     * @returns Promise which fulfills with a list of Readers, representing all the returned values of the result set.
     */
    private static _fetchResultPages;
    /**
     * Helper method that reads a ResultStream and extracts the results, placing them in an array of Readers.
     * @param resultStream The ResultStream to read.
     * @returns Promise which fulfills with a list of Readers, representing all the returned values of the result set.
     */
    private static _readResultStream;
}
