import JSBI from "jsbi";
import { Decimal } from "./IonDecimal";
import { IonType } from "./IonType";
import { BinarySpan } from "./IonSpan";
import { Timestamp } from "./IonTimestamp";
import SignAndMagnitudeInt from "./SignAndMagnitudeInt";
export declare class ParserBinaryRaw {
    private _in;
    private _raw_type;
    private _len;
    private _curr;
    private _null;
    private _fid;
    private _as;
    private _ae;
    private _a;
    private _ts;
    private _in_struct;
    constructor(source: BinarySpan);
    static _readFloatFrom(input: BinarySpan, numberOfBytes: any): number;
    static _readVarUnsignedIntFrom(input: BinarySpan): number;
    static _readVarSignedIntFrom(input: BinarySpan): number;
    static _readSignedIntFrom(input: BinarySpan, numberOfBytes: number): SignAndMagnitudeInt;
    static _readUnsignedIntAsBigIntFrom(input: BinarySpan, numberOfBytes: number): JSBI;
    static _readUnsignedIntAsNumberFrom(input: BinarySpan, numberOfBytes: number): number;
    private static readDecimalValueFrom;
    next(): any;
    stepIn(): void;
    stepOut(): void;
    isNull(): boolean;
    depth(): number;
    getFieldId(): number;
    hasAnnotations(): boolean;
    getAnnotations(): any;
    getAnnotation(index: number): any;
    ionType(): IonType;
    _getSid(): number;
    _stringRepresentation(): string;
    byteValue(): Uint8Array;
    booleanValue(): boolean;
    decimalValue(): Decimal;
    bigIntValue(): JSBI;
    numberValue(): number;
    stringValue(): string;
    timestampValue(): Timestamp;
    private read_binary_float;
    private readVarUnsignedInt;
    private readVarSignedInt;
    private readUnsignedIntAsBigInt;
    private readUnsignedIntAsNumber;
    private read_decimal_value;
    private read_timestamp_value;
    private read_string_value;
    private clear_value;
    private load_length;
    private load_next;
    private load_annotations;
    private load_ivm;
    private load_annotation_values;
    private _readIntegerMagnitude;
    private load_value;
}
