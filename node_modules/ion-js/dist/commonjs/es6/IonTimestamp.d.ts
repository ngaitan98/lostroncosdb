import { Decimal } from "./IonDecimal";
export declare enum TimestampPrecision {
    YEAR = 1,
    MONTH = 2,
    DAY = 3,
    HOUR_AND_MINUTE = 4,
    SECONDS = 5
}
export declare class Timestamp {
    private static _MIN_SECONDS;
    private static _MAX_SECONDS;
    private static _MIN_MINUTE;
    private static _MAX_MINUTE;
    private static _MIN_HOUR;
    private static _MAX_HOUR;
    private static _MIN_DAY;
    private static _MAX_DAY;
    private static _MIN_MONTH;
    private static _MAX_MONTH;
    private static _MIN_YEAR;
    private static _MAX_YEAR;
    private static _MIN_OFFSET;
    private static _MAX_OFFSET;
    private readonly _localOffset;
    private readonly _year;
    private readonly _month?;
    private readonly _day?;
    private readonly _hour?;
    private readonly _minutes?;
    private _precision;
    private readonly _secondsDecimal;
    constructor(localOffset: number, year: number, month?: number, day?: number, hour?: number, minutes?: number, seconds?: number | Decimal);
    static parse(str: string): Timestamp;
    static _adjustMsSinceEpochIfNeeded(year: number, msSinceEpoch: number): number;
    static _splitSecondsDecimal(secondsDecimal: Decimal): [string, string];
    static _valueOf(date: Date, localOffset: number, fractionalSeconds?: Decimal, precision?: TimestampPrecision): Timestamp;
    getLocalOffset(): number;
    getPrecision(): TimestampPrecision;
    getDate(): Date;
    getSecondsInt(): number;
    getSecondsDecimal(): Decimal;
    _getFractionalSeconds(): Decimal;
    equals(that: Timestamp): boolean;
    compareTo(that: Timestamp): number;
    toString(): string;
    private _checkRequiredField;
    private _checkOptionalField;
    private _checkFieldRange;
    private _isLeapYear;
    private _lpadZeros;
}
