"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsbi_1 = __importDefault(require("jsbi"));
const JsbiSerde_1 = require("./JsbiSerde");
class LowLevelBinaryWriter {
    constructor(writeable) {
        this.writeable = writeable;
    }
    static getSignedIntSize(value) {
        if (value === 0) {
            return 1;
        }
        const numberOfSignBits = 1;
        const magnitude = Math.abs(value);
        let numberOfMagnitudeBits = Math.ceil(Math.log2(magnitude + 1));
        let numberOfBits = numberOfMagnitudeBits + numberOfSignBits;
        return Math.ceil(numberOfBits / 8);
    }
    static getUnsignedIntSize(value) {
        if (value instanceof jsbi_1.default) {
            return JsbiSerde_1.JsbiSerde.getUnsignedIntSizeInBytes(value);
        }
        if (value === 0) {
            return 1;
        }
        let numberOfBits = Math.floor(Math['log2'](value)) + 1;
        let numberOfBytes = Math.ceil(numberOfBits / 8);
        return numberOfBytes;
    }
    static getVariableLengthSignedIntSize(value) {
        let absoluteValue = Math.abs(value);
        if (absoluteValue === 0) {
            return 1;
        }
        let valueBits = Math.floor(Math['log2'](absoluteValue)) + 1;
        let trailingStopBits = Math.floor(valueBits / 7);
        let leadingStopBit = 1;
        let signBit = 1;
        return Math.ceil((valueBits + trailingStopBits + leadingStopBit + signBit) / 8);
    }
    static getVariableLengthUnsignedIntSize(value) {
        if (value === 0) {
            return 1;
        }
        let valueBits = Math.floor(Math['log2'](value)) + 1;
        let stopBits = Math.ceil(valueBits / 7);
        return Math.ceil((valueBits + stopBits) / 8);
    }
    writeSignedInt(originalValue) {
        let length = LowLevelBinaryWriter.getSignedIntSize(originalValue);
        let value = Math.abs(originalValue);
        let tempBuf = new Uint8Array(length);
        let i = tempBuf.length;
        while (value >= 128) {
            tempBuf[--i] = value & 0xFF;
            value >>>= 8;
        }
        tempBuf[--i] = value & 0xFF;
        if (1 / originalValue < 0)
            tempBuf[0] |= 0x80;
        this.writeable.writeBytes(tempBuf);
    }
    writeUnsignedInt(originalValue) {
        if (originalValue instanceof jsbi_1.default) {
            let encodedBytes = JsbiSerde_1.JsbiSerde.toUnsignedIntBytes(originalValue);
            this.writeable.writeBytes(encodedBytes);
            return;
        }
        let length = LowLevelBinaryWriter.getUnsignedIntSize(originalValue);
        let tempBuf = new Uint8Array(length);
        let value = originalValue;
        let i = tempBuf.length;
        while (value > 0) {
            tempBuf[--i] = value % 256;
            value = Math.trunc(value / 256);
        }
        this.writeable.writeBytes(tempBuf);
    }
    writeVariableLengthSignedInt(originalValue) {
        let tempBuf = new Uint8Array(LowLevelBinaryWriter.getVariableLengthSignedIntSize(originalValue));
        let value = Math.abs(originalValue);
        let i = tempBuf.length - 1;
        while (value >= 64) {
            tempBuf[i--] = value & 0x7F;
            value >>>= 7;
        }
        tempBuf[i] = value;
        if (1 / originalValue < 0) {
            tempBuf[i] |= 0x40;
        }
        tempBuf[tempBuf.length - 1] |= 0x80;
        this.writeable.writeBytes(tempBuf);
    }
    writeVariableLengthUnsignedInt(originalValue) {
        let tempBuf = new Uint8Array(LowLevelBinaryWriter.getVariableLengthUnsignedIntSize(originalValue));
        let value = originalValue;
        let i = tempBuf.length;
        tempBuf[--i] = (value & 0x7F) | 0x80;
        value >>>= 7;
        while (value > 0) {
            tempBuf[--i] = value & 0x7F;
            value >>>= 7;
        }
        this.writeable.writeBytes(tempBuf);
    }
    writeByte(byte) {
        this.writeable.writeByte(byte);
    }
    writeBytes(bytes) {
        this.writeable.writeBytes(bytes);
    }
    getBytes() {
        return this.writeable.getBytes();
    }
}
exports.LowLevelBinaryWriter = LowLevelBinaryWriter;
//# sourceMappingURL=IonLowLevelBinaryWriter.js.map