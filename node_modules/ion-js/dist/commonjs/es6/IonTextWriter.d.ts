import { AbstractWriter } from "./AbstractWriter";
import { Decimal } from "./IonDecimal";
import { IonType } from "./IonType";
import { Timestamp } from "./IonTimestamp";
import { Writeable } from "./IonWriteable";
import JSBI from "jsbi";
declare type Serializer<T> = (value: T) => void;
export declare enum State {
    VALUE = 0,
    STRUCT_FIELD = 1
}
export declare class Context {
    state: State;
    clean: boolean;
    containerType: IonType;
    constructor(myType: IonType);
}
export declare class TextWriter extends AbstractWriter {
    protected readonly writeable: Writeable;
    protected containerContext: Context[];
    constructor(writeable: Writeable);
    readonly isTopLevel: boolean;
    protected readonly currentContainer: Context;
    private static _serializeFloat;
    getBytes(): Uint8Array;
    writeBlob(value: Uint8Array): void;
    writeBoolean(value: boolean): void;
    writeClob(value: Uint8Array): void;
    writeDecimal(value: Decimal): void;
    writeFieldName(fieldName: string): void;
    writeFloat32(value: number): void;
    writeFloat64(value: number): void;
    writeInt(value: number | JSBI): void;
    writeNull(type: IonType): void;
    writeString(value: string): void;
    writeSymbol(value: string): void;
    writeTimestamp(value: Timestamp): void;
    stepIn(type: IonType): void;
    stepOut(): void;
    close(): void;
    depth(): number;
    protected _serializeValue<T>(type: IonType, value: T, serialize: Serializer<T>): void;
    protected writeContainer(type: IonType, openingCharacter: number): void;
    protected handleSeparator(): void;
    protected writeUtf8(s: string): void;
    protected writeAnnotations(): void;
    protected _stepIn(container: IonType): void;
    protected writeSymbolToken(s: string): void;
    private _writeFloat;
    private readonly _floatSerializer;
    private isSid;
}
export {};
