"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const IonBinaryReader_1 = require("./IonBinaryReader");
const IonConstants_1 = require("./IonConstants");
const IonSpan_1 = require("./IonSpan");
const IonTextReader_1 = require("./IonTextReader");
const IonTextWriter_1 = require("./IonTextWriter");
const IonPrettyTextWriter_1 = require("./IonPrettyTextWriter");
const IonWriteable_1 = require("./IonWriteable");
const IonBinaryWriter_1 = require("./IonBinaryWriter");
const IonLocalSymbolTable_1 = require("./IonLocalSymbolTable");
const IonUnicode_1 = require("./IonUnicode");
const IntSize_1 = __importDefault(require("./IntSize"));
exports.IntSize = IntSize_1.default;
function isBinary(buffer) {
    if (buffer.length < 4) {
        return false;
    }
    for (let i = 0; i < 4; i++) {
        if (buffer[i] !== IonConstants_1.IVM.binary[i])
            return false;
    }
    return true;
}
function makeReader(buf) {
    const catalog = null;
    if ((typeof buf) === "string") {
        return new IonTextReader_1.TextReader(new IonSpan_1.StringSpan(buf), catalog);
    }
    const bufArray = new Uint8Array(buf);
    if (isBinary(bufArray)) {
        return new IonBinaryReader_1.BinaryReader(new IonSpan_1.BinarySpan(bufArray), catalog);
    }
    else {
        return new IonTextReader_1.TextReader(new IonSpan_1.StringSpan(IonUnicode_1.decodeUtf8(bufArray)), catalog);
    }
}
exports.makeReader = makeReader;
function makeTextWriter() {
    return new IonTextWriter_1.TextWriter(new IonWriteable_1.Writeable());
}
exports.makeTextWriter = makeTextWriter;
function makePrettyWriter(indentSize) {
    return new IonPrettyTextWriter_1.PrettyTextWriter(new IonWriteable_1.Writeable(), indentSize);
}
exports.makePrettyWriter = makePrettyWriter;
function makeBinaryWriter() {
    const localSymbolTable = IonLocalSymbolTable_1.defaultLocalSymbolTable();
    return new IonBinaryWriter_1.BinaryWriter(localSymbolTable, new IonWriteable_1.Writeable());
}
exports.makeBinaryWriter = makeBinaryWriter;
var IonCatalog_1 = require("./IonCatalog");
exports.Catalog = IonCatalog_1.Catalog;
var IonDecimal_1 = require("./IonDecimal");
exports.Decimal = IonDecimal_1.Decimal;
var IonLocalSymbolTable_2 = require("./IonLocalSymbolTable");
exports.defaultLocalSymbolTable = IonLocalSymbolTable_2.defaultLocalSymbolTable;
var IonType_1 = require("./IonType");
exports.IonType = IonType_1.IonType;
var IonTypes_1 = require("./IonTypes");
exports.IonTypes = IonTypes_1.IonTypes;
var IonSharedSymbolTable_1 = require("./IonSharedSymbolTable");
exports.SharedSymbolTable = IonSharedSymbolTable_1.SharedSymbolTable;
var IonTimestamp_1 = require("./IonTimestamp");
exports.TimestampPrecision = IonTimestamp_1.TimestampPrecision;
exports.Timestamp = IonTimestamp_1.Timestamp;
var IonText_1 = require("./IonText");
exports.toBase64 = IonText_1.toBase64;
var IonUnicode_2 = require("./IonUnicode");
exports.decodeUtf8 = IonUnicode_2.decodeUtf8;
//# sourceMappingURL=Ion.js.map